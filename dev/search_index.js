var documenterSearchIndex = {"docs":
[{"location":"man/table-interface/#Table-Interface","page":"Table Interface","title":"Table Interface","text":"","category":"section"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"This page provides further details on the interface of ReadStatTable.","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"ReadStatTable","category":"page"},{"location":"man/table-interface/#ReadStatTables.ReadStatTable","page":"Table Interface","title":"ReadStatTables.ReadStatTable","text":"ReadStatTable <: Tables.AbstractColumns\n\nA Tables.jl-compatible column table that collects data from a Stata, SAS or SPSS file.\n\n\n\n\n\n","category":"type"},{"location":"man/table-interface/#Accessing-Data-in-ReadStatTable","page":"Table Interface","title":"Accessing Data in ReadStatTable","text":"","category":"section"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"Commonly used methods are supported for working with ReadStatTable. As a subtype of Tables.AbstractColumns, ReadStatTable also supports the essential methods defined in Tables.jl.","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"using ReadStatTables, Tables\ntb = readstat(\"data/sample.dta\")","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"A column can be accessed either by name or by position via multiple methods:","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"tb.mynum\ntb[:mynum]\nTables.getcolumn(tb, :mynum)\ntb[2]\nTables.getcolumn(tb, 2)","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"To check whether a column is in a ReadStatTable:","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"haskey(tb, :mynum)\nhaskey(tb, 2)","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"To check the number of rows in a ReadStatTable:","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"Tables.rowcount(tb)\nsize(tb, 1)","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"To check the number of columns in a ReadStatTable:","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"length(tb)\nsize(tb, 2)","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"Iterating a ReadStatTable directly results in iteration across columns:","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"for col in tb\n    println(eltype(col))\nend","category":"page"},{"location":"man/table-interface/#Accessing-Metadata-in-ReadStatTable","page":"Table Interface","title":"Accessing Metadata in ReadStatTable","text":"","category":"section"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"When calling readstat, a ReadStatMeta object, which collects metadata from the data file, is saved in the ReadStatTable. This object can be retrieved from ReadStatTable via getmeta.","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"ReadStatMeta\ngetmeta","category":"page"},{"location":"man/table-interface/#ReadStatTables.ReadStatMeta","page":"Table Interface","title":"ReadStatTables.ReadStatMeta","text":"ReadStatMeta\n\nA collection of metadata parsed from a data file.\n\n\n\n\n\n","category":"type"},{"location":"man/table-interface/#ReadStatTables.getmeta","page":"Table Interface","title":"ReadStatTables.getmeta","text":"getmeta(tb::ReadStatTable)\n\nRetrieve the metadata parsed from a data file.\n\n\n\n\n\n","category":"function"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"When shown on REPL, a list of the available metadata are printed:","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"getmeta(tb)","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"Each field of ReadStatMeta can be accessed either directly from ReadStatMeta or from ReadStatTable via the corresponding accessor function.","category":"page"},{"location":"man/table-interface/","page":"Table Interface","title":"Table Interface","text":"varlabels\nvarformats\nval_label_keys\nval_label_dict\nfilelabel\nfiletimestamp\nfileext","category":"page"},{"location":"man/table-interface/#ReadStatTables.varlabels","page":"Table Interface","title":"ReadStatTables.varlabels","text":"varlabels(m::ReadStatMeta)\nvarlabels(tb::ReadStatTable)\n\nRetrieve the variable labels as a dictionary indexed by variable names.\n\n\n\n\n\n","category":"function"},{"location":"man/table-interface/#ReadStatTables.varformats","page":"Table Interface","title":"ReadStatTables.varformats","text":"varformats(m::ReadStatMeta)\nvarformats(tb::ReadStatTable)\n\nRetrieve the variable format strings as a dictionary indexed by variable names.\n\n\n\n\n\n","category":"function"},{"location":"man/table-interface/#ReadStatTables.val_label_keys","page":"Table Interface","title":"ReadStatTables.val_label_keys","text":"val_label_keys(m::ReadStatMeta)\nval_label_keys(tb::ReadStatTable)\n\nRetrieve the names of the collections of value labels applied to each variable as a dictionary indexed by variable names.\n\n\n\n\n\n","category":"function"},{"location":"man/table-interface/#ReadStatTables.val_label_dict","page":"Table Interface","title":"ReadStatTables.val_label_dict","text":"val_label_dict(m::ReadStatMeta)\nval_label_dict(tb::ReadStatTable)\n\nRetrieve all collections of value labels stored in the data file as a dictionary indexed by the names of the collections. Each collection of value labels itself is again a dictionary that maps the values to the associated labels.\n\n\n\n\n\n","category":"function"},{"location":"man/table-interface/#ReadStatTables.filelabel","page":"Table Interface","title":"ReadStatTables.filelabel","text":"filelabel(m::ReadStatMeta)\nfilelabel(tb::ReadStatTable)\n\nRetrieve the label of the data file.\n\n\n\n\n\n","category":"function"},{"location":"man/table-interface/#ReadStatTables.filetimestamp","page":"Table Interface","title":"ReadStatTables.filetimestamp","text":"filetimestamp(m::ReadStatMeta)\nfiletimestamp(tb::ReadStatTable)\n\nRetrieve the time stamp of the data file. (Time zone is not handled.)\n\n\n\n\n\n","category":"function"},{"location":"man/table-interface/#ReadStatTables.fileext","page":"Table Interface","title":"ReadStatTables.fileext","text":"fileext(m::ReadStatMeta)\nfileext(tb::ReadStatTable)\n\nRetrieve the file extension of the data file.\n\n\n\n\n\n","category":"function"},{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"ReadStatTables.jl is licensed under the MIT license.","category":"page"},{"location":"license/","page":"License","title":"License","text":"MIT License\n\nCopyright (c) 2021 Junyuan Chen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.","category":"page"},{"location":"man/date-and-time-values/#Date-and-Time-Values","page":"Date and Time Values","title":"Date and Time Values","text":"","category":"section"},{"location":"man/date-and-time-values/","page":"Date and Time Values","title":"Date and Time Values","text":"Date and time values in the data files are recognized based on the variable format for each variable. For Stata, all date/time formats except %tC and %d are supported.[1] In case certain date/time formats are not recognized, they can be added easily.","category":"page"},{"location":"man/date-and-time-values/#Translating-Date-and-Time-Values","page":"Date and Time Values","title":"Translating Date and Time Values","text":"","category":"section"},{"location":"man/date-and-time-values/","page":"Date and Time Values","title":"Date and Time Values","text":"For all date/time formats from the statistical software, the date and time values are always stored as the numbers of periods passed since a reference date or time point chosen by the software. Therefore, knowing the reference data/time (epoch) and the length of a single period is sufficient for uncovering the represented date/time values for a given format.","category":"page"},{"location":"man/date-and-time-values/","page":"Date and Time Values","title":"Date and Time Values","text":"The full lists of recognized date/time formats for the statistical software are stored as dictionary keys; while the associated values are tuples of reference date/time and period length.[2] If a variable is in a date/time format that is contained in the dictionary keys, readstat will handle the conversion into a Julia time type (unless the convert_datetime option prevents it). Otherwise, if a date/time format is not found in the dictionary keys, no type conversion will be attempted. Additional formats may be added by inserting key-value pairs to the relevant dictionaries.","category":"page"},{"location":"man/date-and-time-values/","page":"Date and Time Values","title":"Date and Time Values","text":"using ReadStatTables","category":"page"},{"location":"man/date-and-time-values/","page":"Date and Time Values","title":"Date and Time Values","text":"ReadStatTables.stata_dt_formats\nReadStatTables.sas_dt_formats[\"MMDDYY\"]\nReadStatTables.spss_dt_formats[\"TIME\"]","category":"page"},{"location":"man/date-and-time-values/","page":"Date and Time Values","title":"Date and Time Values","text":"The translation of the date/time values into a Julia time type is handled by parse_datetime, which is not exported.","category":"page"},{"location":"man/date-and-time-values/","page":"Date and Time Values","title":"Date and Time Values","text":"ReadStatTables.parse_datetime","category":"page"},{"location":"man/date-and-time-values/#ReadStatTables.parse_datetime","page":"Date and Time Values","title":"ReadStatTables.parse_datetime","text":"parse_datetime(col::Vector, epoch::Union{DateTime,Date}, delta::Period)\nparse_datetime(col::Vector, epoch::Union{DateTime,Date}, delta::Period, missingvalue)\n\nConstruct a vector of time values of type DateTime or Date by interpreting the elements in col as the number of periods passed since epoch with the length of each period being delta. If missingvalue is specified, indices where the elements in col are equal to missingvalue based on isequal are set to be missing no matter what is specified with missingvalue.\n\n\n\n\n\n","category":"function"},{"location":"man/date-and-time-values/","page":"Date and Time Values","title":"Date and Time Values","text":"[1]: The only difference between the %tC format and the %tc format is that %tC takes into account leap seconds while %tc does not. Since the DateTime type in the Dates module does not allow leap seconds, only the %tc format is supported. The %d format that appears in earlier versions of Stata is no longer documented in recent versions.","category":"page"},{"location":"man/date-and-time-values/","page":"Date and Time Values","title":"Date and Time Values","text":"[2]: For Stata, the reference for date/time value translation is the official Stata documentation. Only the first three characters in the format strings affect the coding. For SAS and SPSS, the reference is pyreadstat/_readstat_parser.pyx.","category":"page"},{"location":"man/getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"Here is an introduction to the main function of ReadStatTables.jl. For instructions on installation, see Installation.","category":"page"},{"location":"man/getting-started/#Reading-a-Data-File","page":"Getting Started","title":"Reading a Data File","text":"","category":"section"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"Suppose we have a Stata .dta file located at data/sample.dta. To read this file into Julia, run","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"using ReadStatTables\ntb = readstat(\"data/sample.dta\")","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"Here is how we read the above result:[1]","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"Variable names from the data file are displayed in the first row.\nElement type for each variable is displayed below the corresponding variable name.\nThe values for each variable are displayed column-wise starting from the third row.","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"Some additional details to be noted:","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"If a variable contains any missing value, there is a question mark ? in the displayed element type.\nBy default, all missing values are treated as missing, a special value in Julia.\nThe date and time values have been translated into Date and DateTime respectively.[2]\nLabels instead of the numeric values are displayed for variables with value labels.\nLabeled{Int8} is an abbreviation for LabeledValue{Int8}.","category":"page"},{"location":"man/getting-started/#Accessing-Individual-Objects","page":"Getting Started","title":"Accessing Individual Objects","text":"","category":"section"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"A vector of all variable names can be obtained as follows:","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"columnnames(tb)","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"To retrieve the array containing data for a specific variable:","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"tb.mylabl","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"note: Note\nThe returned array is exactly the same array holding the data for the table. Therefore, modifying elements in the returned array will also change the data in the table. To avoid such changes, please make a copy of the array first (by calling copy).","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"Some metadata for the data file are also contained in tb:","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"getmeta(tb)","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"See Table Interface for more complete reference.","category":"page"},{"location":"man/getting-started/#Type-Conversions","page":"Getting Started","title":"Type Conversions","text":"","category":"section"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"The types provided by ReadStatTables.jl should be sufficient for basic tasks. In case more complicated operations are needed, it is easy to convert the objects into other types.","category":"page"},{"location":"man/getting-started/#Converting-ReadStatTable","page":"Getting Started","title":"Converting ReadStatTable","text":"","category":"section"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"The table returned by readstat is a ReadStatTable. Converting the table into another table type is easy as long as the table type can be constructed with an input following the Tables.jl interface.","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"For example, to convert the table into a DataFrame from DataFrames.jl, we run","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"using DataFrames\ndf = DataFrame(tb)","category":"page"},{"location":"man/getting-started/#Converting-LabeledArray","page":"Getting Started","title":"Converting LabeledArray","text":"","category":"section"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"Variables with value labels are stored in LabeledArrays. To convert a LabeledArray into another array type, we need to determine whether we should keep the values or the labels. If only the labels contain the relevant information, we can make use of the labels function which returns an iterator for the labels. For example, to convert a LabeledArray to a CategoricalArray from CategoricalArrays.jl, we run","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"using CategoricalArrays\nCategoricalArray(labels(tb.mylabl))","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"Sometimes, the values have special meanings while the labels are not so important. To obtain an array of the values without the labels, we can call refarray:","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"refarray(tb.mylabl)","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"Alternatively, for a specific element type in the output array, we can call convert:","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"convert(Vector{Int}, tb.mylabl)","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"In the last example, the element type of the output array has become Int.","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"note: Note\nThe array returned by refarray (and by convert if element type is not converted) is exactly the same array underlying the LabeledArray. Therefore, modifying the elements of the array will also modify the values in the original LabeledArray.","category":"page"},{"location":"man/getting-started/#More-Options","page":"Getting Started","title":"More Options","text":"","category":"section"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"The behavior of readstat can be adjusted by passing keyword arguments.","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"readstat","category":"page"},{"location":"man/getting-started/#ReadStatTables.readstat","page":"Getting Started","title":"ReadStatTables.readstat","text":"readstat(filepath::AbstractString; kwargs...)\n\nReturn a ReadStatTable that collects data from a supported data file located at filepath.\n\nAccepted File Extensions\n\nStata: .dta.\nSAS: .sas7bdat and .xpt.\nSPSS: .sav and por.\n\nKeywords\n\nusecols::Union{ColumnSelector, Nothing} = nothing: only keep data from the specified columns (variables); keep all columns if usecols=nothing.\nconvert_datetime::Union{Bool, ColumnSelector} = true: convert data from the specified columns to Date or DateTime if they are recorded in supported time formats; if specified as true (false), always (never) convert the data whenever possible.\napply_value_labels::Union{Bool, ColumnSelector} = true: convert data from the specified columns to LabeledArray with their value labels; if specified as true (false), always (never) convert the data whenever possible.\nmissingvalue = missing: value used to fill any missing value (should be missing unless in special circumstances).\n\n\n\n\n\n","category":"function"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"The values used to specify certain variables (columns) must be either a ColumnIndex or a vector of ColumnIndexs.","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"ReadStatTables.ColumnIndex\nReadStatTables.ColumnSelector","category":"page"},{"location":"man/getting-started/#ReadStatTables.ColumnIndex","page":"Getting Started","title":"ReadStatTables.ColumnIndex","text":"ColumnIndex\n\nA type union for values accepted by readstat for selecting a column. A column can be selected either with the column name as Symbol or String; or with an integer index based on the position in a table. See also ColumnSelector.\n\n\n\n\n\n","category":"type"},{"location":"man/getting-started/#ReadStatTables.ColumnSelector","page":"Getting Started","title":"ReadStatTables.ColumnSelector","text":"ColumnSelector\n\nA type union for values accepted by readstat for selecting either a single column or multiple columns. The accepted values must be either a ColumnIndex or a vector of ColumnIndex.\n\n\n\n\n\n","category":"type"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"[1]: The printed output is generated with PrettyTables.jl.","category":"page"},{"location":"man/getting-started/","page":"Getting Started","title":"Getting Started","text":"[2]: The time types Date and DateTime are from the Dates module of Julia.","category":"page"},{"location":"man/value-labels/#Value-Labels","page":"Value Labels","title":"Value Labels","text":"","category":"section"},{"location":"man/value-labels/","page":"Value Labels","title":"Value Labels","text":"Value labels from the data files are incorporated into the data columns via a customized array type LabeledArray.","category":"page"},{"location":"man/value-labels/#LabeledValue-and-LabeledArray","page":"Value Labels","title":"LabeledValue and LabeledArray","text":"","category":"section"},{"location":"man/value-labels/","page":"Value Labels","title":"Value Labels","text":"LabeledValue and LabeledArray are designed to imitate how variables associated with value labels are represented in the original data files from the statistical software. The element of a LabeledArray is always a LabeledValue.","category":"page"},{"location":"man/value-labels/","page":"Value Labels","title":"Value Labels","text":"In general, variables associated with value labels should not be treated as categorical data. Here are some noteworthy distinctions of LabeledArray from an array type designed for categorical data (e.g., CategoricalArray):","category":"page"},{"location":"man/value-labels/","page":"Value Labels","title":"Value Labels","text":"Values are never recoded when a LabeledArray is constructed.[1]\nIt is allowed for some values in a LabeledArray to not have a label.[2]\nA label is always a String even when it is associated with missing.","category":"page"},{"location":"man/value-labels/","page":"Value Labels","title":"Value Labels","text":"More details are below.","category":"page"},{"location":"man/value-labels/","page":"Value Labels","title":"Value Labels","text":"LabeledValue\nLabeledArray\nLabeledVector","category":"page"},{"location":"man/value-labels/#ReadStatTables.LabeledValue","page":"Value Labels","title":"ReadStatTables.LabeledValue","text":"LabeledValue{T}\n\nValue of type T that is associated with a dictionary of value labels. If a value v is not a key in the dictionary, then string(v) is taken as the label. See also LabeledArray.\n\nThe value underlying a LabeledValue can be accessed via unwrap. The label can be obtained by converting LabeledValue to String or calling labels (notice the s at the end).\n\nComparison operators ==, isequal, <, isless and isapprox compare the underlying value of type T. An exception is that when a LabeledValue and a string are compared with ==, the comparison is based on the label.\n\nExamples\n\njulia> lbls = Dict{Union{Int,Missing},String}(0=>\"a\", 1=>\"a\");\n\njulia> v0 = LabeledValue(0, lbls)\n0 => a\n\njulia> v1 = LabeledValue(1, lbls)\n1 => a\n\njulia> vm = LabeledValue(missing, lbls)\nmissing => missing\n\njulia> v0 == v1\nfalse\n\njulia> v1 == 1\ntrue\n\njulia> v1 == \"a\"\ntrue\n\njulia> isequal(vm, missing)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"man/value-labels/#ReadStatTables.LabeledArray","page":"Value Labels","title":"ReadStatTables.LabeledArray","text":"LabeledArray{V, N, T<:LabeledValue} <: AbstractArray{T, N}\n\nN-dimensional dense array with elements associated with labels.\n\nLabeledArray provides functionality that is similar to what value labels achieve in statistical software such as Stata. When printed to REPL, a LabeledArray just looks like an array of labels. Yet, only the underlying values of type V are stored in an Array. The associated labels are looked up from a dictionary of type Dict{V, String}. If a value v is not a key in the dictionary, then string(v) is taken as the label. The elements of type LabeledValue are only constructed lazily when retrieved.\n\nThe array of values underlying a LabeledArray can be accessed with refarray; while an iterator over the labels for each element is returned by labels.\n\nEquality comparison as defined by == involving a LabeledArray only compares the underlying values unless the element type of the other array is a subtype of AbstractString. The labels are used for comparison in the latter case.\n\nExamples\n\njulia> lbls1 = Dict(1=>\"a\", 2=>\"b\");\n\njulia> lbls2 = Dict(1.0=>\"p\", 2.0=>\"q\");\n\njulia> x = LabeledArray([0, 1, 2], lbls1)\n3-element LabeledVector{Int64, LabeledValue{Int64}}:\n 0 => 0\n 1 => a\n 2 => b\n\njulia> y = LabeledArray([0.0, 1.0, 2.0], lbls2)\n3-element LabeledVector{Float64, LabeledValue{Float64}}:\n 0.0 => 0.0\n 1.0 => p\n 2.0 => q\n\njulia> x == y\ntrue\n\njulia> x == 0:2\ntrue\n\njulia> x == [\"0\", \"a\", \"b\"]\ntrue\n\n\n\n\n\n","category":"type"},{"location":"man/value-labels/#ReadStatTables.LabeledVector","page":"Value Labels","title":"ReadStatTables.LabeledVector","text":"LabeledVector{V, T}\n\nAlias for LabeledArray{V, 1, T}.\n\n\n\n\n\n","category":"type"},{"location":"man/value-labels/#Accessing-Labels-and-Values","page":"Value Labels","title":"Accessing Labels and Values","text":"","category":"section"},{"location":"man/value-labels/","page":"Value Labels","title":"Value Labels","text":"If only the labels of a LabeledArray are needed, an iterator that maintains the shape of the LabeledArray can be obtained by calling labels. The iterator can be used for either collecting all labels in a different array type or retrieving labels for specific values. On the other hand, if only the values are needed, the labels can be ignored if one directly accesses the underlying array that holds the values.","category":"page"},{"location":"man/value-labels/","page":"Value Labels","title":"Value Labels","text":"labels\nunwrap\nrefarray","category":"page"},{"location":"man/value-labels/#ReadStatTables.labels","page":"Value Labels","title":"ReadStatTables.labels","text":"labels(x::LabeledValue)\n\nReturn the label associated with x.\n\n\n\n\n\nlabels(x::AbstractArray{<:LabeledValue})\n\nReturn an iterator over the labels for each element in x. The returned object is a subtype of AbstractArray with the same size of x.\n\nThe iterator can be used to collect the labels while discarding the underlying values.\n\nExamples\n\njulia> x = LabeledArray([1, 2, 3], Dict(1=>\"a\", 2=>\"b\"))\n3-element LabeledVector{Int64, LabeledValue{Int64}}:\n 1 => a\n 2 => b\n 3 => 3\n\njulia> lbls = labels(x)\n3-element ReadStatTables.LabelIterator{LabeledVector{Int64, LabeledValue{Int64}}, 1}:\n \"a\"\n \"b\"\n \"3\"\n\njulia> collect(lbls)\n3-element Vector{String}:\n \"a\"\n \"b\"\n \"3\"\n\njulia> CategoricalArray(lbls)\n3-element CategoricalArray{String,1,UInt32}:\n \"a\"\n \"b\"\n \"3\"\n\n\n\n\n\n","category":"function"},{"location":"man/value-labels/#DataAPI.unwrap","page":"Value Labels","title":"DataAPI.unwrap","text":"unwrap(x::LabeledValue)\n\nGet the value wrapped by x.\n\n\n\n\n\n","category":"function"},{"location":"man/value-labels/#DataAPI.refarray","page":"Value Labels","title":"DataAPI.refarray","text":"refarry(x::LabeledArray)\nrefarray(x::SubArray{<:Any, <:Any, <:LabeledArray})\nrefarray(x::Base.ReshapedArray{<:Any, <:Any, <:LabeledArray})\nrefarray(x::AbstractArray{<:LabeledValue})\n\nReturn the array of values underlying a LabeledArray.\n\n\n\n\n\n","category":"function"},{"location":"man/value-labels/","page":"Value Labels","title":"Value Labels","text":"[1]: The values themselves are sometimes meaningful and should not be treated as reference values.","category":"page"},{"location":"man/value-labels/","page":"Value Labels","title":"Value Labels","text":"[2]: In case a label is requested for a value that is not associated with a label, the value is converted to String.","category":"page"},{"location":"#ReadStatTables.jl","page":"Home","title":"ReadStatTables.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation site for ReadStatTables.jl!","category":"page"},{"location":"","page":"Home","title":"Home","text":"ReadStatTables.jl is a Julia package for reading data files from Stata, SAS and SPSS into a Tables.jl-compatible table. It relies on ReadStat.jl, which is a Julia interface of the ReadStat C library, for parsing the data files. The same C library is also the backend for popular packages such as pyreadstat and haven.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ReadStatTables.jl adds the following features on top of the read support from ReadStat.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A lightweight Tables.jl-compatible column table ReadStatTable for basic operations.\nIntegration of value labels via a customized array type LabeledArray.\nTranslation of date and time values into Julia time types Date and DateTime.","category":"page"},{"location":"#Supported-File-Formats","page":"Home","title":"Supported File Formats","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ReadStatTables.jl accepts file formats that ReadStat.jl supports and selects parsers based on file extensions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Stata: .dta.\nSAS: .sas7bdat and .xpt.\nSPSS: .sav and .por.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ReadStatTables.jl can be installed with the Julia package manager Pkg. From the Julia REPL, type ] to enter the Pkg REPL and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add ReadStatTables","category":"page"},{"location":"#Known-Limitations","page":"Home","title":"Known Limitations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The functionality of ReadStatTables.jl is constrained by what ReadStat.jl achieves. The main limitations are the following.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Read support of value labels for SAS files is absent.\nAll missing values are represented by a single value.[1]\nWrite support of the file formats is not implemented.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[1]: The statistical software may accept multiple values for representing missing values (e.g., .a, .b,...,.z in Stata). These original values are not captured when reading the files.","category":"page"}]
}
